#!/bin/bash

# Script de diagnostic pour l'API

echo "üîç Diagnostic de l'API Food Advisor"
echo "===================================="
echo ""

# V√©rifier les conteneurs
echo "üì¶ √âtat des conteneurs:"
docker compose ps
echo ""

# V√©rifier les ports
echo "üîå Ports en √©coute:"
docker exec food_advisor_api netstat -tlnp 2>/dev/null || docker exec food_advisor_api ss -tlnp 2>/dev/null || echo "Outils r√©seau non disponibles"
echo ""

# V√©rifier les logs r√©cents
echo "üìú Derniers logs de l'API:"
docker compose logs --tail=20 rust-api
echo ""

# Test de connexion depuis l'int√©rieur du conteneur
echo "üß™ Test interne (depuis le conteneur):"
docker exec food_advisor_api curl -v http://localhost:8080/health 2>&1 || docker exec food_advisor_api wget -O- http://localhost:8080/health 2>&1
echo ""

# Test de connexion depuis l'h√¥te
echo "üß™ Test externe (depuis l'h√¥te):"
curl -v http://localhost:8080/health 2>&1
echo ""

# V√©rifier les variables d'environnement
echo "üîß Variables d'environnement dans le conteneur:"
docker exec food_advisor_api env | grep -E "SERVER_HOST|SERVER_PORT|DATABASE_URL"
echo ""

# V√©rifier la connexion √† MySQL
echo "üóÑÔ∏è Test de connexion MySQL:"
docker exec food_advisor_api bash -c 'echo "SELECT 1;" | mysql -h mysql -u food_advisor_user -puser food_advisor_db 2>&1' || echo "Client MySQL non install√©"
echo ""

# V√©rifier les processus Rust
echo "‚öôÔ∏è Processus Rust en cours:"
docker exec food_advisor_api ps aux | grep -E "cargo|target/debug" | grep -v grep
echo ""